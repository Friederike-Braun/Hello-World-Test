pipeline{
  agent any
  tools {
          maven "3.6.3"
          jdk "JDK-17"
  }
  environment {
          // This can be nexus3 or nexus2
          NEXUS_VERSION = "nexus3"
          // This can be http or https
          NEXUS_PROTOCOL = "https"
          // Where your Nexus is running
          NEXUS_URL = "nexus.haeger-consulting.de"
          // Repository where we will upload the artifact
          NEXUS_REPOSITORY = "Training-maven"
          // Jenkins credential id to authenticate to Nexus OSS
          NEXUS_CREDENTIAL_ID = "Training-Nexus-Uploader"
  }

  stages{
    stage('Build'){
        steps {
            echo 'Building the application'
            sh 'mvn clean compile test-compile'
        }
    }
    stage ('Test') {
        steps {
            echo 'Testing the application'
            // -Dmaven.test.failure.ignore=true causes maven to ignore any failed tests & continue with further goals
            sh 'mvn -Dmaven.test.failure.ignore=true test'
        }
        post {
            always {
                echo 'Build stable, all tests passed; test results archived in "target/surefire-reports/**/*.xml"'
                junit 'target/surefire-reports/**/*.xml'
            }
            unstable {
                error('Build unstable, at least one test failed. Aborting pipeline')
            }
        }
    }
    stage('Package'){
        steps {
            echo 'Packaging the application'
            sh 'mvn -Dmaven.test.skip package'
        }
    }
    stage('Push to Nexus'){
        steps {
            echo 'Pushing the packaged application to Nexus Repository Manager'

            //generated using jenkins snippet generator
            /*nexusArtifactUploader artifacts: [
                [
                    artifactId: 'Hello-World-Test',
                    classifier: '',
                    file: 'target/Hello-World-Test-1.0-SNAPSHOT.jar',
                    type: 'jar'
                ]
            ],
            credentialsId: 'Diego-Nexus',
            groupId: 'org.example',
            nexusUrl: 'nexus.haeger-consulting.de',
            nexusVersion: 'nexus3',
            protocol: 'http',
            repository: 'friederike-maven-hello-world',
            version: '1.0-SNAPSHOT'*/

            sh 'mvn install'

            script {
                echo 'start of upload script, before read POM'
                // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                pom = readMavenPom file: "pom.xml";

                echo 'after readPOM step; pom path is: ${pom.path}'

                // Find built artifact under target folder
                filesByGlob = findFiles(glob: "target/*.${pom.packaging}");

                // Print some info from the artifact found
                echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"

                // Extract the path from the File found
                artifactPath = filesByGlob[0].path;

                // Assign to a boolean response verifying If the artifact name exists
                artifactExists = fileExists artifactPath;

                if(artifactExists) {
                    echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                    //start upload to nexus
                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL,
                        groupId: pom.groupId,
                        version: pom.version,
                        repository: NEXUS_REPOSITORY,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            // Artifact generated such as .jar, .ear and .war files.
                            [artifactId: pom.artifactId,
                            classifier: '',
                            file: artifactPath,
                            type: pom.packaging],

                            // Lets upload the pom.xml file for additional information for Transitive dependencies
                            [artifactId: pom.artifactId,
                            classifier: '',
                            file: "pom.xml",
                            type: "pom"]
                        ]
                    );
                } else {
                    error "*** File: ${artifactPath}, could not be found";
                }

            }

            echo 'Checking if push to nexus was successful'
            script {
                if(manager.logContains(".*Failed to retrieve remote metadata.*")) {
                    echo 'Push to nexus failed; Cause: Failed to retrieve remote metadata'
                    error('Failed to retrieve remote metadata')
                }
                else if(manager.logContains(".*Failed.*")) {
                    echo 'Push to nexus failed; Cause unknown, check logs in detail'
                    error('Failed due to unknown error, check logs in detail')
                }
                else {
                    echo 'Push to nexus was successful'
                }
            }
        }
    }
  }
}