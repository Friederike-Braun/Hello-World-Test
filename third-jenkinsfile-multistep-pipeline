pipeline{
  agent any
  tools {
          maven "3.6.3"
          jdk "JDK-17"
  }

  stages{
    stage('Build'){
        steps {
            echo 'Building the application'
            sh 'mvn compile test-compile'
        }
    }
    stage ('Test') {
        steps {
            echo 'Testing the application'
            // -Dmaven.test.failure.ignore=true causes maven to ignore any failed tests & continue with further goals
            sh 'mvn -Dmaven.test.failure.ignore=true test'
        }
        post {
            always {
                junit 'target/surefire-reports/**/*.xml'
            }
            unstable {
                error('Build unstable, at least one test failed. Aborting pipeline')
            }
        }
    }
    stage('Package'){
        steps {
            echo 'Cleaning & packaging the application'
            sh 'mvn clean -Dmaven.test.skip package'
        }
    }
    stage('Push to Nexus'){
            steps {
                echo 'Pushing the packaged application to Nexus Repository Manager'

                //generated using jenkins snippet generator
                nexusArtifactUploader artifacts: [
                    [
                        artifactId: 'Hello-World-Test',
                        classifier: '',
                        file: 'target/Hello-World-Test-1.0-SNAPSHOT.jar',
                        type: 'jar'
                    ]
                ],
                credentialsId: 'Diego-Nexus',
                groupId: 'org.example',
                nexusUrl: 'nexus.haeger-consulting.de',
                nexusVersion: 'nexus3',
                protocol: 'http',
                repository: 'friederike-maven-hello-world',
                version: '1.0-SNAPSHOT'
            }
        }
        stage('Nexus Result'){
            steps {
                echo 'Checking that push to nexus was successful'
                script {
                    if(manager.logContains(".*Failed to retrieve remote metadata.*")) {
                        error('Failed to retrieve remote metadata')
                    }
                    else if(manager.logContains(".*Failed.*")) {
                        error('Failed due to unknown error, check logs in detail')
                    }
                }
            }
        }
  }
  post{
    failure {
        echo 'pipeline failed, cleaning the application before shutdown'
        sh 'mvn clean'
    }
  }
}